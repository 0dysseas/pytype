# TODO(pludemann): review this -- it was generated by:
#         pytype --api python_runtime/v2_7/Lib/string.py
# TODO(pludemann): needs strop.lowercase

_float = ...  # type: type
_idmap = ...  # type: str
_idmapL = ...  # type: NoneType
_int = ...  # type: type
_long = ...  # type: type
_re = ...  # type: module
ascii_letters = ...  # type: str
ascii_lowercase = ...  # type: str
ascii_uppercase = ...  # type: str
atof_error = ...  # type: type
atoi_error = ...  # type: type
atol_error = ...  # type: type
digits = ...  # type: str
hexdigits = ...  # type: str
index_error = ...  # type: type
l = ...  # type: list[?]
letters = ...  # type: str
lowercase = ...  # type: str
# maketrans: function  # TODO(pludemann): pytype generated this but shouldn't have
octdigits = ...  # type: str
printable = ...  # type: str
punctuation = ...  # type: str
uppercase = ...  # type: str
whitespace = ...  # type: str

def atof(s) -> ?
def atoi(s, base, ...) -> ?
def atol(s, base, ...) -> ?
def capitalize(s) -> ?
def capwords(s, sep, ...) -> ?
def center(s, width) -> ?
def count(s) -> ?
def expandtabs(s, tabsize, ...) -> ?
def find(s) -> ?
def index(s) -> ?
def join(words, sep, ...) -> ?
def joinfields(words, sep, ...) -> ?
def ljust(s, width) -> ?
def lower(s) -> ?
def lstrip(s, chars, ...) -> ?
def maketrans(fromstr, tostr) -> ?
def replace(s, old, new, maxreplace, ...) -> ?
def rfind(s) -> ?
def rindex(s) -> ?
def rjust(s, width) -> ?
def rsplit(s, sep, maxsplit, ...) -> ?
def rstrip(s, chars, ...) -> ?
def split(s, sep, maxsplit, ...) -> ?
def splitfields(s, sep, maxsplit, ...) -> ?
def strip(s, chars, ...) -> ?
def swapcase(s) -> ?
def translate(s, table, deletions, ...) -> ?
def upper(s) -> ?
def zfill(x, width) -> ?

class Formatter(object):
    def _vformat(self, format_string, args, kwargs, used_args, recursion_depth) -> ?
    def check_unused_args(self, used_args, args, kwargs) -> ?
    def convert_field(self, value, conversion) -> ?
    def format(self, format_string) -> ?
    def format_field(self, value, format_spec) -> ?
    def get_field(self, field_name, args, kwargs) -> ?
    def get_value(self, key, args, kwargs) -> ?
    def parse(self, format_string) -> ?
    def vformat(self, format_string, args, kwargs) -> ?

class Template():
    __doc__ = ...  # type: str
    __metaclass__ = ...  # type: type
    delimiter = ...  # type: str
    idpattern = ...  # type: str
    def __init__(self, template) -> ?
    def _invalid(self, mo) -> ?
    def safe_substitute(self) -> ?
    def substitute(self) -> ?

class _TemplateMetaclass(type):
    pattern = ...  # type: str
    def __init__(cls, name, bases, dct) -> ?

class _multimap():
    __doc__ = ...  # type: str
    def __getitem__(self, key) -> ?
    def __init__(self, primary, secondary) -> ?
