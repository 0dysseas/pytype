from typing import Any, Callable, Dict, Iterable, List, Tuple

K = TypeVar("K")
V = TypeVar("V")
N = TypeVar("N")

__all__ = ...  # type: list[?]
_abcoll = ...  # type: ?
_chain = ...  # type: type
_class_template = ...  # type: str
_eq = ...  # type: ?
_field_template = ...  # type: str
_get_ident = ...  # type: ?
_heapq = ...  # type: ?
_imap = ...  # type: type
_iskeyword = ...  # type: ?
_itemgetter = ...  # type: Callable
_repeat = ...  # type: type
_repr_template = ...  # type: str
_starmap = ...  # type: type
_sys = ...  # type: module
deque = ...  # type: ?
dumps = ...  # type: Callable
loads = ...  # type: Callable

Container = ... # type: ?
Hashable = ... # type: ?
Iterable = ... # type: ?
Iterator = ... # type: ?
Sized = ... # type: ?
Callable = ... # type: ?
Sequence = ... # type: ?
MutableSequence = ... # type: ?
Set = ... # type: ?
MutableSet = ... # type: ?
Mapping = ... # type: ?
MutableMapping = ... # type: ?
MappingView = ... # type: ?
ItemsView = ... # type: ?
KeysView = ... # type: ?
ValuesView = ... # type: ?

def namedtuple(typename: str,
        field_names: str or Iterable[str] or Iterable[nothing],
        verbose: bool = ..., rename: bool = ...) -> type

class OrderedDict(Dict[K, V]):
  def popitem(self, last: bool = ...) -> Tuple[K, V]

class defaultdict(Dict[K, V]):
  default_factory = ...  # type: Callable[[], Any]
  def __init__(self) -> None:
    self := defaultdict[nothing, nothing]
  def __init__(self, default_factory: Callable[[], Any]) -> None:
    self := defaultdict[nothing, nothing]
  def __init__(self, default_factory: Callable[[], Any], list: List[nothing]) -> None:
    self := defaultdict[nothing, nothing]
  def __init__(self, default_factory: Callable[[], Any], list: List[Tuple[N, ...]]) -> None:
    self := defaultdict[N, N]
  def __init__(self, default_factory: Callable[[], Any], ...) -> None:
    self := defaultdict[Any, Any]
  def __init__(self, **kwargs) -> None:
    self := defaultdict[Any, Any]
  def __missing__(self, key: K) -> V
  def __getitem__(self, key: N) -> Any:
    self := defaultdict[K or N, Any]

# Strictly speaking, this should be dict[?, ?]. (E.g. it's legal to do
# collections.Counter()[x] = 'foobar'.) But the counts are typically integers.
class Counter(dict[?, int]):
    __doc__ = ...  # type: str
    fromkeys = ...  # type: classmethod
    def __add__(self, other: dict[object, object]) -> Counter or NotImplementedType
    def __and__(self, other: bytearray or xrange or dict[?, object] or list[object] or tuple) -> Counter or NotImplementedType
    def __delitem__(self, elem) -> NoneType
    def __init__(self, ...) -> NoneType
    def __missing__(self, key) -> int
    def __or__(self, other: dict[object, object]) -> Counter or NotImplementedType
    def __reduce__(self) -> tuple
    def __repr__(self) -> str
    def __sub__(self, other: dict[object, object]) -> Counter or NotImplementedType
    def copy(self) -> ?
    def elements(self) -> ?
    def most_common(self, ...) -> ?
    def subtract(self, ...) -> NoneType
    def update(self, ...) -> NoneType
