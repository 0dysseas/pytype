BOM = ...  # type: str
BOM32_BE = ...  # type: str
BOM32_LE = ...  # type: str
BOM64_BE = ...  # type: str
BOM64_LE = ...  # type: str
BOM_BE = ...  # type: str
BOM_LE = ...  # type: str
BOM_UTF16 = ...  # type: str
BOM_UTF16_BE = ...  # type: str
BOM_UTF16_LE = ...  # type: str
BOM_UTF32 = ...  # type: str
BOM_UTF32_BE = ...  # type: str
BOM_UTF32_LE = ...  # type: str
BOM_UTF8 = ...  # type: str

# TODO(pludemann): check def's with "-> ?"
class BufferedIncrementalDecoder(object):
    def __init__(self, ...) -> NoneType
    def _buffer_decode(self, input, errors, final) -> ? raises NotImplementedError
    def decode(self, input, final) -> ? raises NotImplementedError
    def getstate(self) -> tuple[str, int]
    def reset(self) -> NoneType
    def setstate(self, state) -> NoneType

class BufferedIncrementalEncoder(object):
    def __init__(self, ...) -> NoneType
    def _buffer_encode(self, input, errors, final) -> ? raises NotImplementedError
    def encode(self, input, final) -> ? raises NotImplementedError
    def getstate(self) -> int
    def reset(self) -> NoneType
    def setstate(self, state) -> NoneType

class Codec(object):
    def __init__(self, ...) -> NoneType
    def decode(self, input, errors) -> ? raises NotImplementedError
    def encode(self, input, errors) -> ? raises NotImplementedError
