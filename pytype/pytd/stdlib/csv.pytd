# TODO(pludemann): review this -- it was generated by:
#         pytype --api python_runtime/v2_7/Lib/csv.py
# TODO(pludemann): Needs _csv, operator, UserDict, warnings

class Error:
  pass

QUOTE_ALL: int
QUOTE_MINIMAL: int
QUOTE_NONE: int
QUOTE_NONNUMERIC: int
StringIO: function or type
_Dialect: type
__all__: list<str>
__version__: str
complex: type
field_size_limit: function
get_dialect: function
list_dialects: function
re: module
reader: type
reduce: function
register_dialect: function
unregister_dialect: function
writer: type

class Dialect(nothing):
    __doc__: str
    _name: str
    _valid: bool
    delimiter: NoneType
    doublequote: NoneType
    escapechar: NoneType
    lineterminator: NoneType
    quotechar: NoneType
    quoting: NoneType
    skipinitialspace: NoneType
    def __init__(self) -> ?
    def _validate(self) -> ?

class DictReader(nothing):
    fieldnames: ?
    def __init__(self, f, fieldnames, restkey, restval, dialect, ...) -> ?
    def __iter__(self) -> ?
    def next(self) -> ?

class DictWriter(nothing):
    def __init__(self, f, fieldnames, restval, extrasaction, dialect, ...) -> ?
    def _dict_to_list(self, rowdict) -> ?
    def writeheader(self) -> ?
    def writerow(self, rowdict) -> ?
    def writerows(self, rowdicts) -> ?

class Sniffer(nothing):
    __doc__: str
    def __init__(self) -> ?
    def _guess_delimiter(self, data, delimiters) -> ?
    def _guess_quote_and_delimiter(self, data, delimiters) -> ?
    def has_header(self, sample) -> ?
    def sniff(self, sample, delimiters, ...) -> ?

class excel(Dialect):
    __doc__: str
    delimiter: str
    doublequote: bool
    lineterminator: str
    quotechar: str
    quoting: int
    skipinitialspace: bool

class excel_tab(excel):
    __doc__: str
    delimiter: str
