# TODO(pludemann): review this -- it was generated by:
#          pytype --api python_runtime/v2_7/Lib/pdb.py

Repr = ...  # type: function
TESTCMD = ...  # type: str
__all__ = ...  # type: list[str]
_repr = ...  # type: ?
_saferepr = ...  # type: function
bdb = ...  # type: ?
cmd = ...  # type: ?
line_prefix = ...  # type: str
linecache = ...  # type: ?
os = ...  # type: module
pdb = ...  # type: ?
pprint = ...  # type: ?
re = ...  # type: module
sys = ...  # type: module
traceback = ...  # type: module

def find_function(funcname, filename) -> NoneType
def find_function(funcname: str or unicode, filename) -> NoneType
def help() -> NoneType
def main() -> NoneType
def pm() -> NoneType
def post_mortem(...) -> NoneType
def run(statement, ...) -> NoneType
def runcall(...) -> ?
def runctx(statement, globals, locals) -> NoneType
def runeval(expression, ...) -> ?
def set_trace() -> NoneType
def test() -> NoneType

class Pdb(?, ?):
    _user_requested_quit = ...  # type: int
    _wait_for_mainpyfile = ...  # type: int
    aliases = ...  # type: dict[bytearray or str or unicode, str or unicode]
    cmdqueue = ...  # type: list[bytes or str or unicode]
    commands = ...  # type: dict[int, list[bytearray or bytes or str or unicode]]
    commands_bnum = ...  # type: NoneType or int
    commands_defining = ...  # type: bool
    commands_doprompt = ...  # type: dict[NoneType or int, bool]
    commands_resuming = ...  # type: list[str]
    commands_silent = ...  # type: dict[NoneType or int, bool]
    curframe = ...  # type: ?
    curframe_locals = ...  # type: ?
    curindex = ...  # type: complex or float or int or long or dict[dict[?, ?], bytearray or xrange or dict[?, ?] or list[?] or tuple[?]]
    currentbp = ...  # type: int
    do_h = ...  # type: ?
    lastcmd = ...  # type: ?
    lineno = ...  # type: NoneType or int
    mainpyfile = ...  # type: ?
    prompt = ...  # type: str
    rcLines = ...  # type: list[str]
    stack = ...  # type: dict[dict[?, ?], bytearray or xrange or dict[?, ?] or list[?] or tuple[?]] or list[nothing]
    use_rawinput = ...  # type: int
    def __init__(self, ...) -> NoneType
    def _getval(self, arg) -> ?
    def _runscript(self, filename) -> NoneType
    def bp_commands(self, frame) -> NoneType or int
    def checkline(self, filename, lineno: NoneType) -> NoneType or int
    def checkline(self, filename, lineno: int) -> int
    def checkline(self, filename, lineno) -> ?
    def default(self, line) -> ?
    def defaultFile(self) -> ?
    def displayhook(self, obj) -> NoneType
    def do_EOF(self, arg) -> int
    def do_a(self, arg) -> NoneType
    def do_alias(self, arg: bytearray or str or unicode) -> NoneType
    def do_args(self, arg) -> NoneType
    def do_b(self, arg: str or unicode, ...) -> NoneType
    def do_break(self, arg: str or unicode, ...) -> NoneType
    def do_bt(self, arg) -> NoneType
    def do_c(self, arg) -> int
    def do_cl(self, arg: ?) -> NoneType
    def do_clear(self, arg: ?) -> NoneType
    def do_commands(self, arg) -> NoneType
    def do_condition(self, arg: bytearray or str or unicode) -> NoneType
    def do_cont(self, arg) -> int
    def do_continue(self, arg) -> int
    def do_d(self, arg) -> NoneType
    def do_debug(self, arg) -> NoneType
    def do_disable(self, arg: ?) -> NoneType
    def do_down(self, arg) -> NoneType
    def do_enable(self, arg: ?) -> NoneType
    def do_exit(self, arg) -> int
    def do_ignore(self, arg: bytearray or str or unicode) -> NoneType
    def do_j(self, arg: bool or complex or float or int or long or dict_keys[?]) -> NoneType
    def do_jump(self, arg: bool or complex or float or int or long or dict_keys[?]) -> NoneType
    def do_l(self, arg) -> NoneType
    def do_list(self, arg) -> NoneType
    def do_n(self, arg) -> int
    def do_next(self, arg) -> int
    def do_p(self, arg) -> NoneType
    def do_pp(self, arg) -> NoneType
    def do_q(self, arg) -> int
    def do_quit(self, arg) -> int
    def do_r(self, arg) -> int
    def do_restart(self, arg) -> ?
    def do_return(self, arg) -> int
    def do_retval(self, arg) -> NoneType
    def do_run(self, arg) -> ?
    def do_rv(self, arg) -> NoneType
    def do_s(self, arg) -> int
    def do_step(self, arg) -> int
    def do_tbreak(self, arg: str or unicode) -> NoneType
    def do_u(self, arg) -> NoneType
    def do_unalias(self, arg: bytearray or str or unicode) -> NoneType
    def do_unt(self, arg) -> int
    def do_until(self, arg) -> int
    def do_up(self, arg) -> NoneType
    def do_w(self, arg) -> NoneType
    def do_whatis(self, arg) -> NoneType
    def do_where(self, arg) -> NoneType
    def execRcLines(self) -> NoneType
    def forget(self) -> NoneType
    def handle_command_def(self, line: str) -> NoneType or int
    def help_EOF(self) -> NoneType
    def help_a(self) -> NoneType
    def help_alias(self) -> NoneType
    def help_args(self) -> NoneType
    def help_b(self) -> NoneType
    def help_break(self) -> NoneType
    def help_bt(self) -> NoneType
    def help_c(self) -> NoneType
    def help_cl(self) -> NoneType
    def help_clear(self) -> NoneType
    def help_commands(self) -> NoneType
    def help_condition(self) -> NoneType
    def help_cont(self) -> NoneType
    def help_continue(self) -> NoneType
    def help_d(self) -> NoneType
    def help_debug(self) -> NoneType
    def help_disable(self) -> NoneType
    def help_down(self) -> NoneType
    def help_enable(self) -> NoneType
    def help_exec(self) -> NoneType
    def help_exit(self) -> NoneType
    def help_h(self) -> NoneType
    def help_help(self) -> NoneType
    def help_ignore(self) -> NoneType
    def help_j(self) -> NoneType
    def help_jump(self) -> NoneType
    def help_l(self) -> NoneType
    def help_list(self) -> NoneType
    def help_n(self) -> NoneType
    def help_next(self) -> NoneType
    def help_p(self) -> NoneType
    def help_pdb(self) -> NoneType
    def help_pp(self) -> NoneType
    def help_q(self) -> NoneType
    def help_quit(self) -> NoneType
    def help_r(self) -> NoneType
    def help_restart(self) -> NoneType
    def help_return(self) -> NoneType
    def help_run(self) -> NoneType
    def help_s(self) -> NoneType
    def help_step(self) -> NoneType
    def help_tbreak(self) -> NoneType
    def help_u(self) -> NoneType
    def help_unalias(self) -> NoneType
    def help_unt(self) -> NoneType
    def help_until(self) -> NoneType
    def help_up(self) -> NoneType
    def help_w(self) -> NoneType
    def help_whatis(self) -> NoneType
    def help_where(self) -> NoneType
    def interaction(self, frame: NoneType, traceback: ?) -> NoneType
    def interaction(self, frame, traceback) -> NoneType
    def lineinfo(self, identifier: str or unicode) -> tuple[NoneType]
    def lookupmodule(self, filename: buffer or str or unicode) -> ?
    def onecmd(self, line: str) -> ?
    def precmd(self, line: str or unicode) -> bytes or str or unicode
    def print_stack_entry(self, frame_lineno, ...) -> NoneType
    def print_stack_trace(self) -> NoneType
    def reset(self) -> NoneType
    def setup(self, f: NoneType, t: ?) -> NoneType
    def setup(self, f, t: NoneType) -> NoneType
    def user_call(self, frame, argument_list) -> NoneType
    def user_exception(self, frame, exc_info) -> NoneType
    def user_line(self, frame) -> NoneType
    def user_return(self, frame, return_value) -> NoneType

class Restart(Exception):
    __doc__ = ...  # type: str
