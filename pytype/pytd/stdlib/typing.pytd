# Special-cased by the parser: TypeVar, Any, AnyStr, NamedTuple
ARGS = TypeVar('ARGS')
RET = TypeVar('RET')
K = TypeVar('K')
V = TypeVar('V')
class Callable(Generic[ARGS, RET], object):
  def __call__(self, ...) -> Any
T = TypeVar('T')
class Generic(object): pass
class Iterator(Generic[T], object): ...
class Iterable(Generic[T], object): ...
class Container(Generic[T], object): ...
class Sized(object): ...  # same as in collections.abc
class Sequence(Sized, Iterable[T], Container[T]): ...
class Tuple(Sequence[T]): ...
class MutableSequence(Sequence[T]): ...
class List(MutableSequence[T]): ...
class IO(object):
  def __enter__(self) -> IO: ...
  def __exit__(self, t, value, traceback) -> bool: ...
class BinaryIO(IO): ...
class TextIO(IO): ...
class Mapping(Generic[K, V], object): ...
class MutableMapping(Mapping[K, V], object): ...
class Dict(MutableMapping[K, V]): ...
class AbstractSet(Generic[T], object): ...
class FrozenSet(AbstractSet[T], object): ...
class MutableSet(AbstractSet[T], object): ...
class Set(MutableSet[T], object): ...
class Reversible(object): ...
class SupportsInt(object): ...
class SupportsFloat(object): ...
class SupportsAbs(object): ...
class Optional(Generic[T], object): ...
class Generator(Generic[T], object): ...

# TODO(rechen): All of the types below this point are placeholder
# definitions from github.com/python/typing/blob/master/src/typing.py.
# They need to be fleshed out and tested.

class AsyncIterable(object): ...
class AsyncIterator(object): ...
class Awaitable(object): ...
class ByteString(object): ...
class DefaultDict(object): ...
class Final(object): ...
class Hashable(object): ...
class ItemsView(object): ...
class KeysView(object): ...
class MappingView(object): ...
class Match(object): ...
class Pattern(object): ...
class SupportsBytes(object): ...
class SupportsComplex(object): ...
class SupportsRound(object): ...
class Type(object): ...
class Union(object): ...
class ValuesView(object): ...

def cast(typ, val) -> Any
def get_type_hints(obj, ...) -> Any
def NewType(name, tp) -> Any
def no_type_check(arg) -> Any
def no_type_check_decorator(decorator) -> Any
def overload(func) -> Any

Text = str
TYPE_CHECKING = ...  # type: bool