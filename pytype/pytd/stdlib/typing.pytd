ARGS = TypeVar('ARGS')
RET = TypeVar('RET')
K = TypeVar('K')
V = TypeVar('V')
class Callable(typing.Generic[ARGS, RET], object): ...
T = TypeVar('T')
class AnyStr(object): ...
class Iterator(typing.Generic[T], object): ...
class Iterable(typing.Generic[T], object): ...
class Container(typing.Generic[T], object): ...
class Sized(object): ...  # same as in collections.abc
class Sequence(typing.Generic[T], Sized, Iterable, Container): ...
class MutableSequence(typing.Generic[T], Sequence): ...
class IO(object):
  def __enter__(self) -> IO: ...
  def __exit__(self, t, value, traceback) -> bool: ...
class BinaryIO(IO): ...
class TextIO(IO): ...
class Mapping(typing.Generic[K, V], object): ...
class MutableMapping(typing.Generic[K, V], Mapping, object): ...
class AbstractSet(typing.Generic[T], object): ...
class Set(typing.Generic[T], AbstractSet, object): ...
class MutableSet(typing.Generic[T], Set, object): ...
class Reversible(object): ...
class SupportsInt(object): ...
class SupportsFloat(object): ...
class SupportsAbs(object): ...
class List(typing.Generic[T], MutableSequence): ...
