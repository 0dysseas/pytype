# TODO(pludemann): review this -- it was generated by:
#          pytype --api python_runtime/v2_7/Lib/logging/__init__.py
#     and:
#          for d in dir(logging): print d, type(getattr(logging, d))

__all__: list<str>

BASIC_FORMAT: str
class BufferingFormatter:
  pass
CRITICAL: int
DEBUG: int
ERROR: int
FATAL: int
class FileHandler:
  pass
class Filter:
  pass
class Filterer:
  pass
class Formatter:
  pass
class Handler:
  pass
INFO: int
class LogRecord:
  pass
class Logger:
  pass
class LoggerAdapter:
  pass
class Manager:
  pass
NOTSET: int
class NullHandler:
  pass
class PlaceHolder:
  pass
class RootLogger:
  pass
class StreamHandler:
  pass
WARN: int
WARNING: int
__author__: str
__builtins__: dict
__date__: str
__doc__: str
__file__: str
__name__: str
__package__: str
__path__: list
__status__: str
__version__: str
_acquireLock: function
_addHandlerRef: function
_checkLevel: function
_defaultFormatter: Formatter
_handlerList: list
# _handlers: instance  # TODO(pludemann): add instance class to __builtins__.pytd?
_levelNames: dict
# _lock: threading._RLock  # TODO(pludemann)
class _loggerClass:
  pass
_releaseLock: function
_removeHandlerRef: function
_showwarning: function
_srcfile: str
_startTime: float
_unicode: bool
_warnings_showwarning: NoneType
addLevelName: function
atexit: module
basicConfig: function
cStringIO: module
captureWarnings: function
codecs: module
critical: function
currentframe: function
debug: function
disable: function
error: function
exception: function
fatal: function
getLevelName: function
getLogger: function
getLoggerClass: function
info: function
log: function
logMultiprocessing: int
logProcesses: int
logThreads: int
makeLogRecord: function
os: module
raiseExceptions: int
# root: logging.RootLogger  # TODO(pludemann)
setLoggerClass: function
shutdown: function
sys: module
thread: module
threading: module
time: module
traceback: module
warn: function
warning: function
warnings: module
weakref: module

