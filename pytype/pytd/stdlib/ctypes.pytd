# TODO(pludemann): review this -- it was generated by:
#      for d in dir(ctypes): print d, type(getattr(ctypes, d))

ARRAY = ...  # type: function
ArgumentError = ...  # type: type
Array = ...  # type: _ctypes.PyCArrayType
# BigEndianStructure _endian._swapped_meta
CDLL = ...  # type: type
CFUNCTYPE = ...  # type: function
DEFAULT_MODE = ...  # type: int
class LibraryLoader:
  pass
LittleEndianStructure = ...  # type: _ctypes.PyCStructType
POINTER = ...  # type: function
PYFUNCTYPE = ...  # type: function
class PyDLL:
  pass
RTLD_GLOBAL = ...  # type: int
RTLD_LOCAL = ...  # type: int
SetPointerType = ...  # type: function
Structure = ...  # type: _ctypes.PyCStructType
Union = ...  # type: _ctypes.UnionType
_CFuncPtr = ...  # type: _ctypes.PyCFuncPtrType
_FUNCFLAG_CDECL = ...  # type: int
_FUNCFLAG_PYTHONAPI = ...  # type: int
_FUNCFLAG_USE_ERRNO = ...  # type: int
_FUNCFLAG_USE_LASTERROR = ...  # type: int
_Pointer = ...  # type: _ctypes.PyCPointerType
_SimpleCData = ...  # type: _ctypes.PyCSimpleType
__builtins__ = ...  # type: dict
__doc__ = ...  # type: str
__file__ = ...  # type: str
__name__ = ...  # type: str
__package__ = ...  # type: str
__path__ = ...  # type: list
__version__ = ...  # type: str
_c_functype_cache = ...  # type: dict
_calcsize = ...  # type: function
_cast = ...  # type: function
_cast_addr = ...  # type: int
_check_size = ...  # type: function
_ctypes_version = ...  # type: str
_dlopen = ...  # type: function
_endian = ...  # type: module
_memmove_addr = ...  # type: int
_memset_addr = ...  # type: int
_os = ...  # type: module
_pointer_type_cache = ...  # type: dict
_reset_cache = ...  # type: function
_string_at = ...  # type: function
_string_at_addr = ...  # type: int
_sys = ...  # type: module
_wstring_at = ...  # type: function
_wstring_at_addr = ...  # type: int
addressof = ...  # type: function
alignment = ...  # type: function
byref = ...  # type: function
c_bool = ...  # type: _ctypes.PyCSimpleType
c_buffer = ...  # type: function
c_byte = ...  # type: _ctypes.PyCSimpleType
c_char = ...  # type: _ctypes.PyCSimpleType
c_char_p = ...  # type: _ctypes.PyCSimpleType
c_double = ...  # type: _ctypes.PyCSimpleType
c_float = ...  # type: _ctypes.PyCSimpleType
c_int = ...  # type: _ctypes.PyCSimpleType
c_int16 = ...  # type: _ctypes.PyCSimpleType
c_int32 = ...  # type: _ctypes.PyCSimpleType
c_int64 = ...  # type: _ctypes.PyCSimpleType
c_int8 = ...  # type: _ctypes.PyCSimpleType
c_long = ...  # type: _ctypes.PyCSimpleType
c_longdouble = ...  # type: _ctypes.PyCSimpleType
c_longlong = ...  # type: _ctypes.PyCSimpleType
c_short = ...  # type: _ctypes.PyCSimpleType
c_size_t = ...  # type: _ctypes.PyCSimpleType
c_ssize_t = ...  # type: _ctypes.PyCSimpleType
c_ubyte = ...  # type: _ctypes.PyCSimpleType
c_uint = ...  # type: _ctypes.PyCSimpleType
c_uint16 = ...  # type: _ctypes.PyCSimpleType
c_uint32 = ...  # type: _ctypes.PyCSimpleType
c_uint64 = ...  # type: _ctypes.PyCSimpleType
c_uint8 = ...  # type: _ctypes.PyCSimpleType
c_ulong = ...  # type: _ctypes.PyCSimpleType
c_ulonglong = ...  # type: _ctypes.PyCSimpleType
c_ushort = ...  # type: _ctypes.PyCSimpleType
c_void_p = ...  # type: _ctypes.PyCSimpleType
c_voidp = ...  # type: _ctypes.PyCSimpleType
c_wchar = ...  # type: _ctypes.PyCSimpleType
c_wchar_p = ...  # type: _ctypes.PyCSimpleType
cast = ...  # type: function
cdll = ...  # type: LibraryLoader
create_string_buffer = ...  # type: function
create_unicode_buffer = ...  # type: function
get_errno = ...  # type: function
memmove = ...  # type: function
memset = ...  # type: function
pointer = ...  # type: function
py_object = ...  # type: _ctypes.PyCSimpleType
pydll = ...  # type: LibraryLoader
pythonapi = ...  # type: PyDLL
resize = ...  # type: function
set_conversion_mode = ...  # type: function
set_errno = ...  # type: function
sizeof = ...  # type: function
string_at = ...  # type: function
wstring_at = ...  # type: function
