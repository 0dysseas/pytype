# TODO(pludemann): parameterize by type?
class array(object):
    def __init__(self, ...) -> NoneType
    def __copy__() -> ?
    def __deepcopy__(...) -> ?
    def __reduce__() -> tuple:
        raise AttributeError()
    def __sizeof__() -> int
    def append(...) -> NoneType
    def buffer_info() -> tuple
    def byteswap() -> NoneType:
        raise RuntimeError()
    def count(...) -> int
    def extend(...) -> NoneType
    def fromfile(...) -> NoneType:
        raise EOFError()
        raise IOError()
        raise MemoryError()
        raise TypeError()
    def fromlist(...) -> NoneType:
        raise MemoryError()
        raise TypeError()
    def fromstring(...) -> NoneType:
        raise MemoryError()
        raise ValueError()
    def fromunicode(...) -> NoneType:
        raise MemoryError()
        raise ValueError()
    def index(...) -> int:
        raise ValueError()
    def insert(...) -> NoneType
    def pop(...) -> ?:
        raise IndexError()
    def read(...) -> NoneType:
        raise DeprecationWarning()
    def remove(...) -> NoneType:
        raise ValueError()
    def reverse() -> NoneType
    def tofile(...) -> NoneType:
        raise IOError()
        raise TypeError()
    def tolist() -> list
    def tostring() -> str:
        raise MemoryError()
    def tounicode() -> unicode:
        raise ValueError()
    def write(...) -> NoneType:
        raise DeprecationWarning()

class arrayiterator(object):
    pass
