class _flags:  # TODO(pludemann): allow calling this `flags`
  debug: int
  py3k_warning: int
  division_warning: int
  division_new: int
  inspect: int
  interactive: int
  optimize: int
  dont_write_bytecode: int
  no_user_site: int
  no_site: int
  ignore_environment: int
  tabcheck: int
  verbose: int
  unicode: int
  bytes_warning: int
  hash_randomization: int


__displayhook__: object
__excepthook__: object
__stderr__: file
__stdin__: file
__stdout__: file
_mercurial: tuple
api_version: int
argv: list<str>
builtin_module_names: list<str>
byteorder: str
copyright: str
dont_write_bytecode: bool
exec_prefix: str
executable: str
flags: _flags  # shadows class flags in sys.py
float_info: object
float_repr_style: str
hexversion: int
long_info: object
maxint: int
maxsize: int
maxunicode: int
modules: dict<str, module>
path: list<str>
platform: str
prefix: str
py3kwarning: bool
stderr: file
stdin: file
stdout: file
subversion: tuple
version: str
version_info: tuple<int>
warnoptions: object

def _clear_type_cache() -> NoneType
def _current_frames() -> ?  # TODO(pludemann): fix return type
def _getframe(...) -> ? raises ValueError  # TODO(pludemann): fix return type
def call_tracing(a, b) -> ?  # TODO(pludemann): fix return type
def displayhook(...) -> NoneType raises RuntimeError
def exc_clear() -> NoneType raises DeprecationWarning
def exc_info() -> tuple
def excepthook(...) -> NoneType
def exit(...) -> NoneType raises SystemExit
def getcheckinterval() -> int
def getdefaultencoding() -> str
def getdlopenflags() -> int
def getfilesystemencoding() -> str or NoneType
def getprofile() -> NoneType
def getrecursionlimit() -> int
def getrefcount(...) -> int
def getsizeof(object, ...) -> int raises TypeError
def gettrace() -> NoneType
def setcheckinterval(a: int) -> NoneType
def setdefaultencoding(a: str) -> NoneType
def setdlopenflags(a: int) -> NoneType
def setprofile(...) -> NoneType
def setrecursionlimit(a: int) -> NoneType raises ValueError
def settrace(...) -> NoneType
