# TODO(pludemann): review this -- it was generated by:
#        for d in dir(math):  print d, type(getattr(math, d))
#     With all functions converted to single args taking float and returning float

__doc__ = ...  # type: str
__name__ = ...  # type: str
__package__ = ...  # type: NoneType

e = ...  # type: float
pi = ...  # type: float

def acos(x: float or int) -> float
def acosh(x: float or int) -> float
def asin(x: float or int) -> float
def asinh(x: float or int) -> float
def atan(x: float or int) -> float
def atan2(x: float or int) -> float
def atanh(x: float or int) -> float
def ceil(x: float or int) -> float
def copysign(x: float or int) -> float
def cos(x: float or int) -> float
def cosh(x: float or int) -> float
def degrees(x: float or int) -> float
def erf(x: float or int) -> float
def erfc(x: float or int) -> float
def exp(x: float or int) -> float
def expm1(x: float or int) -> float
def fabs(x: float or int) -> float
def factorial(x: float or int) -> float raises ValueError
def floor(x: float or int) -> float
def fmod(x: float or int) -> float
def frexp(x: float or int) -> tuple[float or int, float or int]
def fsum(x: float or int) -> float raises OverflowError, ValueError
def gamma(x: float or int) -> float
def hypot(x: float or int) -> float
def isinf(x: float or int) -> bool
def isnan(x: float or int) -> bool
def ldexp(x: float or int) -> float raises TypeError
def lgamma(x: float or int) -> float
def log(x: float or int) -> float
def log10(x: float or int) -> float
def log1p(x: float or int) -> float
def modf(x: float or int) -> tuple[float or int, float or int]
def pow(x: float or int) -> float
def radians(x: float or int) -> float
def sin(x: float or int) -> float
def sinh(x: float or int) -> float
def sqrt(x: float or int) -> float
def tan(x: float or int) -> float
def tanh(x: float or int) -> float
def trunc(x: float or int) -> int

