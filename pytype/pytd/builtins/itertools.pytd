def tee(a, ...) -> tuple raises ValueError

class _grouper(object):
    pass

class chain(object):
    def __init__(self, ...) -> NoneType
    def from_iterable(...) -> ?

class combinations(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class combinations_with_replacement(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class compress(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> count

class count(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> count
    def __reduce__() -> tuple
    def next(self) -> int or long or float or complex

class cycle(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class dropwhile(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class groupby(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class ifilter(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class ifilterfalse(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class imap(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class islice(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class izip(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class izip_longest(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class permutations(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class product(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class repeat(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class starmap(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class takewhile(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any

class tee_dataobject(object):
    def __init__(self, ...) -> NoneType
    def __iter__(self) -> Any
