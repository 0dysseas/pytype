#!/usr/bin/python2.7
"""Tool for inferring types from Python programs.

'pytype' is a tool for generating pyi from Python programs.

Usage:
  pytype [flags] file.py
"""

import atexit
import cProfile
import csv
import logging
import os
import sys
import traceback

from pytype import config
from pytype import directors
from pytype import errors
from pytype import infer
from pytype import metrics
from pytype.pyc import pyc
from pytype.pytd import optimize
from pytype.pytd import pytd
from pytype.pytd import utils as pytd_utils
from pytype.pytd.parse import parser
from pytype.pytd.parse import visitors


log = logging.getLogger(__name__)


def check_pyi(input_filename, output_filename, errorlog, options):
  with open(input_filename, "r") as fi:
    py_src = fi.read()
  if output_filename is not None:
    with open(output_filename, "r") as fi:
      pyi_src = fi.read()
  else:
    pyi_src = None
  infer.check_types(
      py_src,
      pyi_src,
      py_filename=input_filename,
      pytd_filename=output_filename,
      errorlog=errorlog,
      options=options,
      run_builtins=options.run_builtins,
      reverse_operators=options.reverse_operators,
      cache_unknowns=options.cache_unknowns)


def generate_pyi(input_filename, output_filename, errorlog, options):
  """Run the inferencer on one file, producing output.

  Args:
    input_filename: name of the file to process
    output_filename: name of the file for writing the output. If this is None,
                     then the options are used to determine where to write the
                     output.
    errorlog: Where error messages go. Instance of errors.ErrorLog.
    options: config.Options object.

  Returns:
    The pyi AST.

  Raises:
    SystemExit: If we couldn't parse a PYI file.
  """
  with open(input_filename, "r") as fi:
    src = fi.read()

  mod = None
  try:
    mod = infer.infer_types(
        src,
        errorlog=errorlog,
        options=options,
        filename=input_filename,
        run_builtins=options.run_builtins,
        deep=options.api or options.structural,
        solve_unknowns=options.solve_unknowns or options.api,
        reverse_operators=options.reverse_operators,
        cache_unknowns=options.cache_unknowns)
    mod.Visit(visitors.VerifyVisitor())
  except pyc.CompileError as e:
    # Compiling a *.py failed. Tell the user what Python told us and exit.
    sys.stderr.write(e.message + "\n")
    sys.exit(1)
  except parser.ParseError as e:
    if options.nofail:
      log.warn("Parser error: %s", str(e))
      result = "def __getattr__(name) -> Any: ...\n"
      result += "# Caught error in pyi file:\n# " + str(e).replace("\n", "\n# ")
    else:
      # TODO(kramm): We should store errors of this kind in the errorlog and
      # continue processing.
      sys.stderr.write(str(e))
      sys.exit(1)
  except Exception as e:  # pylint: disable=broad-except
    if options.nofail:
      log.warn("***Caught exception: %s", str(e), exc_info=True)
      result = ("def __getattr__(name) -> Any: ...\n"
                "# Caught error in pytype: " + str(e).replace("\n", "\n#")
                + "\n# " + "\n# ".join(traceback.format_exc().splitlines()))
      mod = None
    else:
      raise
  else:
    if options.optimize:
      mod = optimize.Optimize(mod,
                              # TODO(kramm): Add FLAGs for these
                              lossy=False,
                              use_abcs=False,
                              max_union=7,
                              remove_mutable=False)
      log.info("=========== pyi optimized =============")
    else:
      log.info("=========== pyi =============")
    mod = pytd_utils.CanonicalOrdering(mod, sort_signatures=True)
    log.info("\n%s", pytd.Print(mod))
    log.info("========================================")

    result = pytd.Print(mod)
    if not result.endswith("\n"):  # TODO(pludemann): fix this hack
      result += "\n"

    result_prefix = ""
    if options.quick:
      result_prefix += "# (generated with --quick)\n"
    if result_prefix:
      result = result_prefix + "\n" + result

  if output_filename == "-" or not output_filename:
    sys.stdout.write(result)
  else:
    log.info("write pyi %r => %r", input_filename, output_filename)
    with open(output_filename, "w") as fi:
      fi.write(result)


def process_one_file(input_filename,
                     output_filename,
                     options,
                     print_errors=True,
                     errors_csv_file=None):
  """Check or generate a .pyi, according to options.

  Args:
    input_filename: name of the file to process
    output_filename: name of the file for writing the output. If this is None,
                     then the options are used to determine where to write the
                     output.
    options: config.Options object.
    print_errors: whether to print the error log. This does not suppress all
                  errors (e.g., syntax errors) but is intended to suppress
                  possibly spurious messages during the first pass if pytype is
                  doing two passes.
    errors_csv_file: a csv writer object to write errors into. If None,
                     errors are not written into a csv file.

  Returns:
    An error code (0 means no error).

  """
  errorlog = errors.ErrorLog()
  with open(input_filename, "rb") as fi:
    director = directors.Director(fi.read(), errorlog, input_filename,
                                  options.disable)
  errorlog.set_error_filter(director.should_report_error)
  if options.check:
    check_pyi(input_filename=input_filename,
              output_filename=output_filename,
              errorlog=errorlog,
              options=options)
  else:
    generate_pyi(input_filename=input_filename,
                 output_filename=output_filename,
                 errorlog=errorlog,
                 options=options)
  if options.report_errors:
    if print_errors:
      if errors_csv_file:
        errorlog.print_to_csv_file(errors_csv_file)
      else:
        errorlog.print_to_stderr()

    return 1 if errorlog.has_error() else 0  # exit code
  else:
    return 0


class _ProfileContext(object):
  """A context manager for optionally profiling code."""

  def __init__(self, output_path):
    """Initialize.

    Args:
      output_path: A pathname for the profiler output.  An empty string
          indicates that no profiling should be done.
    """
    self._output_path = output_path
    self._profile = cProfile.Profile() if self._output_path else None

  def __enter__(self):
    if self._profile:
      self._profile.enable()

  def __exit__(self, exc_type, exc_value, traceback):  # pylint: disable=redefined-outer-name
    if self._profile:
      self._profile.disable()
      self._profile.dump_stats(self._output_path)


def main(argv):
  try:
    options = config.Options(argv)
  except config.OptParseError as e:
    print >>sys.stderr, str(e)
    sys.exit(1)

  with _ProfileContext(options.profile):
    with metrics.MetricsContext(options.metrics):
      return _run_pytype(options)


def _run_pytype(options):
  """Run pytype with the given configuration options."""
  if not options.src_out:
    print >>sys.stderr, "Need at least one filename."
    sys.exit(1)

  logging.basicConfig(level=options.basic_logging_level)

  # Do *not* apply os.path.abspath here because we could be in a symlink tree
  # and bad things happen if you go to relative directories.
# MOE:begin_strip
  # Note that you should not do os.path.abspath(f) below; it will probably fail
  # on Forge because of the symlink tree pointing into the cache:
# MOE:end_strip

  # If we're processing more than one file, we need to do two passes (if we
  # don't know what the dependencies are). To speed things up, separate out the
  # biggest file and only process it once.  So, sort by size of the input files:
  if len(options.src_out) > 1:
    options.src_out.sort(reverse=True, key=lambda s: os.path.getsize(s[0]))
    for input_filename, output_filename in options.src_out[1:]:
      log.info("Process [pre-pass] %s => %s", input_filename, output_filename)
      _ = process_one_file(input_filename, output_filename, options,
                           print_errors=False)

  if options.output_errors_csv:
    f = open(options.output_errors_csv, "wb")
    errors_csv_file = csv.writer(f, delimiter=",")
    atexit.register(f.close)
  else:
    errors_csv_file = None

  exit_status = 0
  for input_filename, output_filename in options.src_out:
    log.info("Process %s => %s", input_filename, output_filename)
    ret = process_one_file(input_filename,
                           output_filename,
                           options,
                           print_errors=True,
                           errors_csv_file=errors_csv_file)
    exit_status = ret or exit_status

  return exit_status


if __name__ == "__main__":
  sys.exit(main(sys.argv) or 0)
