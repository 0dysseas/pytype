#!/usr/bin/python2.7
"""Tool for inferring types from Python programs.

'pytype' is a tool for generating pyi from Python programs.

Usage:
  pytype [flags] file.py
"""

import cProfile
import logging
import os
import sys
import tokenize
import traceback

from pytype import analyze
from pytype import config
from pytype import directors
from pytype import errors
from pytype import load_pytd
from pytype import metrics
from pytype import utils
from pytype.pyc import pyc
from pytype.pyi import parser
from pytype.pytd import optimize
from pytype.pytd import pytd
from pytype.pytd import pytd_utils
from pytype.pytd import serialize_ast
from pytype.pytd.parse import builtins as pytd_builtins
from pytype.pytd.parse import node
from pytype.pytd.parse import visitors


log = logging.getLogger(__name__)


def _read_source_file(input_filename):
  try:
    with open(input_filename, "r") as fi:
      return fi.read()
  except IOError:
    raise utils.UsageError("Could not load input file %s" % input_filename)


def check_pyi(input_filename, errorlog, options):
  py_src = _read_source_file(input_filename)
  analyze.check_types(
      py_src=py_src,
      loader=_create_loader(input_filename, options),
      py_filename=input_filename,
      errorlog=errorlog,
      options=options,
      deep=not options.main_only)


def _create_loader(input_filename, options):
  module_name = analyze.get_module_name(input_filename, options)
  if options.use_pickled_files:
    return load_pytd.PickledPyiLoader(
        base_module=module_name,
        use_pickled_typeshed=options.use_pickled_typeshed,
        options=options)
  else:
    return load_pytd.Loader(
        base_module=module_name, options=options)


def generate_pyi(input_filename, errorlog, options, loader):
  """Run the inferencer on one file, producing output.

  Args:
    input_filename: name of the file to process
    errorlog: Where error messages go. Instance of errors.ErrorLog.
    options: config.Options object.
    loader: A load_pytd.Loader instance.

  Returns:
    A tuple, (PYI Ast as string, TypeDeclUnit).

  Raises:
    CompileError: If we couldn't parse the input file.
    UsageError: If the input filepath is invalid.
  """
  src = _read_source_file(input_filename)
  mod, builtins = analyze.infer_types(
      src=src,
      errorlog=errorlog,
      options=options,
      loader=loader,
      filename=input_filename,
      deep=not options.main_only,
      maximum_depth=1 if options.quick else 3)
  mod.Visit(visitors.VerifyVisitor())
  mod = optimize.Optimize(mod,
                          builtins,
                          # TODO(kramm): Add FLAGs for these
                          lossy=False,
                          use_abcs=False,
                          max_union=7,
                          remove_mutable=False)
  log.info("=========== pyi optimized =============")
  mod = pytd_utils.CanonicalOrdering(mod, sort_signatures=True)
  log.info("\n%s", pytd.Print(mod))
  log.info("========================================")

  result = pytd.Print(mod)
  if not result.endswith("\n"):
    result += "\n"
  result_prefix = ""
  if options.quick:
    result_prefix += "# (generated with --quick)\n"
  if result_prefix:
    result = result_prefix + "\n" + result
  return result, mod


def process_one_file(input_filename,
                     output_filename,
                     options):
  """Check or generate a .pyi, according to options.

  Args:
    input_filename: name of the file to process
    output_filename: name of the file for writing the output. If this is None,
                     then the options are used to determine where to write the
                     output.
    options: config.Options object.

  Returns:
    An error code (0 means no error).

  """
  errorlog = errors.ErrorLog()
  result = pytd_builtins.DEFAULT_SRC
  ast = pytd_builtins.GetDefaultAst(options.python_version)
  try:
    if options.check:
      check_pyi(input_filename=input_filename,
                errorlog=errorlog,
                options=options)
    else:
      loader = _create_loader(input_filename, options)
      result, ast = generate_pyi(input_filename=input_filename,
                                 errorlog=errorlog,
                                 options=options,
                                 loader=loader)
  except utils.UsageError as e:
    sys.stderr.write("Usage error: %s\n" % e.message)
    sys.exit(1)
  except pyc.CompileError as e:
    errorlog.python_compiler_error(input_filename, e.lineno, e.error)
  except IndentationError as e:
    errorlog.python_compiler_error(input_filename, e.lineno, e.msg)
  except tokenize.TokenError as e:
    msg, (lineno, unused_column) = e.args  # pylint: disable=unpacking-non-sequence
    errorlog.python_compiler_error(input_filename, lineno, msg)
  except directors.SkipFile:
    result += "# skip-file found, file not analyzed"
  except Exception as e:  # pylint: disable=broad-except
    if options.nofail:
      log.warn("***Caught exception: %s", str(e), exc_info=True)
      if not options.check:
        result += (  # pytype: disable=name-error
            "# Caught error in pytype: " + str(e).replace("\n", "\n#")
            + "\n# " + "\n# ".join(traceback.format_exc().splitlines()))
    else:
      message = str(e.message) + "\nException: %s\nFile: %s" % (
          type(e).__name__, input_filename)
      raise AssertionError, message, sys.exc_info()[2]
  if not options.check:
    if output_filename == "-" or not output_filename:
      sys.stdout.write(result)
    else:
      log.info("write pyi %r => %r", input_filename, output_filename)
      with open(output_filename, "w") as fi:
        fi.write(result)
      if options.output_pickled:
        try:
          ast = serialize_ast.PrepareForExport(
              options.module_name, options.python_version, ast)
        except parser.ParseError as e:
          if options.nofail:
            ast = serialize_ast.PrepareForExport(
                options.module_name, options.python_version,
                pytd_builtins.GetDefaultAst(options.python_version))
            log.warn("***Caught exception: %s", str(e), exc_info=True)
          else:
            raise
        if options.verify_pickle:
          ast1 = ast.Visit(visitors.LateTypeToClassType())
          ast1 = ast1.Visit(visitors.ClearClassPointers())
          ast2 = loader.load_file(options.module_name, output_filename)
          ast2 = ast2.Visit(visitors.ClearClassPointers())
          if not ast1.ASTeq(ast2):
            raise AssertionError()
        serialize_ast.StoreAst(ast, options.output_pickled)
  if options.report_errors:
    if options.output_errors_csv:
      errorlog.print_to_csv_file(options.output_errors_csv)
      return 0  # Command is successful regardless of errors.
    else:
      errorlog.print_to_stderr()
      if (options.target_name and
          any(e.name == "import-error" for e in errorlog)):
        print >>sys.stderr, "\nWhile building %r" % options.target_name
    return 1 if errorlog.has_error() else 0  # exit code
  else:
    return 0


class _ProfileContext(object):
  """A context manager for optionally profiling code."""

  def __init__(self, output_path):
    """Initialize.

    Args:
      output_path: A pathname for the profiler output.  An empty string
          indicates that no profiling should be done.
    """
    self._output_path = output_path
    self._profile = cProfile.Profile() if self._output_path else None

  def __enter__(self):
    if self._profile:
      self._profile.enable()

  def __exit__(self, exc_type, exc_value, traceback):  # pylint: disable=redefined-outer-name
    if self._profile:
      self._profile.disable()
      self._profile.dump_stats(self._output_path)


def _convert_to_pickle(options):
  """Converts a pyi file to a pickled ast."""
  loader = _create_loader(options.input, options)
  ast = loader.load_file(options.module_name, options.input)
  ast = ast.Visit(visitors.CanonicalOrderingVisitor())
  serialize_ast.StoreAst(ast, options.convert_to_pickle)
  return 0


def main(argv):
  try:
    options = config.Options(argv)
  except (config.OptParseError, utils.UsageError) as e:
    print >>sys.stderr, str(e)
    sys.exit(1)

  if options.show_config:
    print options
    sys.exit(1)

  # TODO(dbaum): Consider changing flag default and/or polarity.  This will
  # need to be coordinated with a change to pytype.bzl.
  if not options.check_preconditions:
    node.DisablePreconditions()

  if options.convert_to_pickle:
    return _convert_to_pickle(options)

  with _ProfileContext(options.profile):
    with metrics.MetricsContext(options.metrics):
      with metrics.StopWatch("total_time"):
        with metrics.Snapshot("memory", enabled=options.memory_snapshots):
          return _run_pytype(options)


def _run_pytype(options):
  """Run pytype with the given configuration options."""
  if options.generate_builtins:
    pytd_builtins.Precompile(options.generate_builtins,
                             options.python_version)
    return

  if options.precompiled_builtins:
    # TODO(mdemello): This is not covered by testing.
    pytd_builtins.LoadPrecompiled(options.precompiled_builtins,
                                  options.python_version)

  log.info("Process %s => %s", options.input, options.output)
  exit_status = process_one_file(options.input,
                                 options.output,
                                 options)

  # Touch output file upon success.
  if options.touch and not exit_status:
    with open(options.touch, "a"):
      os.utime(options.touch, None)

  return exit_status


if __name__ == "__main__":
  sys.exit(main(sys.argv) or 0)
